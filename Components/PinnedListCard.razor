@using Microsoft.EntityFrameworkCore
@using ingrEZ.Models
@inject IDialogService DialogService
@inject IDbContextFactory<ingrEZ.Data.IngrEZDataContext> DbFactory

<MudCard class="border-2 mr-5 full" Elevation="0" Style="height: 100%;">
  <MudCardHeader>
    <CardHeaderContent>
      @if (Recipe == null)
      {
        <MudSkeleton Height="35px" Width="@GetVariableWidth()" Animation="Animation.Wave" />
      }
      else
      {
        <div class="d-flex align-start">
          <MudIcon Class="mr-1" Icon="@GetMealIcon()" Size="Size.Small" />
          <MudText Typo="Typo.body1"><b>@Recipe.Name</b></MudText>
          <MudSpacer />
          @* <MudTooltip Text="@($"{Recipe.PreperationTime} min")" Placement="Placement.Top" Arrow>
            <div class="ml-2">
              @for (int i = 0; i < PreperationLevel(); i++)
              {
                <MudIcon Class="ml-n2" Icon="@Icons.Material.TwoTone.HourglassFull" Size="Size.Small" />
              }
            </div>
          </MudTooltip> *@
        </div>
      }
    </CardHeaderContent>
  </MudCardHeader>

  <MudCardContent Class="py-1">
    @if (Recipe == null)
    {
      <MudSkeleton Width="@GetVariableWidth(min:35, max: 60)" Height="25px" Animation="Animation.Wave" />
      <MudSkeleton Width="@GetVariableWidth(min:35, max: 60)" Height="25px" Animation="Animation.Wave" />
      <MudSkeleton Width="@GetVariableWidth(min:35, max: 60)" Height="25px" Animation="Animation.Wave" />
      <br />
      <MudSkeleton Width="@GetVariableWidth(min:35, max: 60)" Height="25px" Animation="Animation.Wave" />
    }
    else
    {
      <MudText Typo="Typo.body2" Color="@DifficultyColor()">@Recipe.Difficulty</MudText>
      <MudText Typo="Typo.body2">@($"{Recipe.ServingSize} Servings")</MudText>
    }
  </MudCardContent>

  <MudCardActions>
    @if (Recipe == null)
    {
      <MudSkeleton Class="ml-2 mb-3" SkeletonType="SkeletonType.Rectangle" Width="25%" Height="2em"
        Animation="Animation.Wave" />
    }
    else
    {
      <MudButton Color="Color.Primary" OnClick="ShowRecipeDialog">More Info</MudButton>
      <MudSpacer />
      <MudIconButton Class="mr-1" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="RemoveRecipe" />
    }
  </MudCardActions>
</MudCard>


@code {
  [Parameter]
  public Recipe? Recipe { get; set; }
  [Parameter]
  public EventCallback OnRemoveRecipe { get; set; }

  DialogOptions CardMessageOptions = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
  Random random = new Random();

  private Task ShowRecipeDialog()
  {
    var options = new DialogOptions() { CloseButton = true, FullWidth = true };
    var parameters = new DialogParameters<RecipeDialog> { { x => x.Recipe, Recipe } };

    return DialogService.ShowAsync<RecipeDialog>(Recipe!.Name, parameters, options);
  }

  private async void RemoveRecipe()
  {
    bool? result = await DialogService.ShowMessageBox(
    "Remove from Pinned",
    (MarkupString)$"Do you want to Remove <em>{Recipe!.Name}</em>?",
    yesText: "Delete", cancelText: "Cancel", options: CardMessageOptions);

    if (result != null)
    {
      using var context = DbFactory.CreateDbContext();

      context.Recipe.Remove(Recipe);
      await context.SaveChangesAsync();
      await OnRemoveRecipe.InvokeAsync();
    }
  }

  private string GetMealIcon()
  {
    if (Recipe!.MealType == "Breakfast")
    {
      return @Icons.Material.Outlined.EggAlt;
    }
    else if (Recipe!.MealType == "Lunch")
    {
      return @Icons.Material.Outlined.LunchDining;
    }
    else
    {
      return @Icons.Material.Outlined.DinnerDining;
    }
  }

  private string GetVariableWidth(int min = 60, int max = 75)
  {
    return $"{random.Next(min, max)}%";
  }

  private int PreperationLevel()
  {
    var result = Math.Min(Recipe!.PreperationTime / 15, 3);
    return result > 0 ? result : 1;
  }

  private string FormatIngredients()
  {
    if (Recipe!.Ingredients.Length <= 4)
    {
      return string.Join(", ", Recipe.Ingredients);
    }

    return $"{string.Join(", ", Recipe.Ingredients.Take(4))} + {Recipe.Ingredients.Length - 4} more";
  }

  private Color DifficultyColor()
  {
    switch (Recipe!.Difficulty)
    {
      case "Easy":
        return Color.Success;
      case "Medium":
        return Color.Warning;
      case "Hard":
        return Color.Error;
      default:
        return Color.Default;
    }
  }
}