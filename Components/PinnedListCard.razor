@using Microsoft.EntityFrameworkCore
@using ingrEZ.Models
@inject IDialogService DialogService
@inject IDbContextFactory<Data.IngrEZDataContext> DbFactory

<MudCard class="border-2 mr-5 full" Elevation="0" Style="height: 100%;">
  <MudCardHeader>
    <CardHeaderContent>
      @if (Recipe == null)
      {
        <MudSkeleton Height="35px" Width="@GetVariableWidth()" Animation="Animation.Wave"/>
      }
      else
      {
        <div class="d-flex align-start">
          <MudIcon Class="mr-1" Icon="@GetMealIcon()" Size="Size.Small"/>
          <MudText Typo="Typo.body1" Style="line-height: 1.2em;"><b>@Recipe.Name</b></MudText>
        </div>
      }
    </CardHeaderContent>
    <CardHeaderActions>
      @if (Recipe == null)
      {
        <MudSkeleton class="mt-2 mr-1" Height="35px" Width="25px" Animation="Animation.Wave"/>
      }
      else
      {
        <div class="mt-3 mx-2">
          <MudTooltip Text="@($"{Recipe.PreparationTime} min")" Placement="Placement.Top" Arrow>
            @for (int i = 0; i < PreparationLevel(); i++)
            {
              <MudIcon Class="mx-n1" Icon="@Icons.Material.TwoTone.HourglassFull" Size="Size.Small"/>
            }
          </MudTooltip>
        </div>
      }
    </CardHeaderActions>
  </MudCardHeader>

  <MudCardContent Class="py-1">
    @if (Recipe == null)
    {
      <MudSkeleton Width="@GetVariableWidth(min: 35, max: 60)" Height="25px" Animation="Animation.Wave"/>
      <MudSkeleton Width="@GetVariableWidth(min: 35, max: 60)" Height="25px" Animation="Animation.Wave"/>
      <MudSkeleton Width="@GetVariableWidth(min: 35, max: 60)" Height="25px" Animation="Animation.Wave"/>
      <br/>
      <MudSkeleton Width="@GetVariableWidth(min: 35, max: 60)" Height="25px" Animation="Animation.Wave"/>
    }
    else
    {
      <MudText Typo="Typo.body2" Color="@DifficultyColor()">@Recipe.Difficulty</MudText>
      <MudText Typo="Typo.body2">@($"{Recipe.ServingSize} Servings")</MudText>
    }
  </MudCardContent>

  <MudCardActions>
    @if (Recipe == null)
    {
      <MudSkeleton Class="ml-2 mb-3" SkeletonType="SkeletonType.Rectangle" Width="25%" Height="2em"
                   Animation="Animation.Wave"/>
    }
    else
    {
      <MudButton Color="Color.Primary" OnClick="ShowRecipeDialog">More Info</MudButton>
      <MudSpacer/>
      <MudIconButton Class="pa-1" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="RemoveRecipe"/>
    }
  </MudCardActions>
</MudCard>


@code {
  [Parameter] public Recipe? Recipe { get; set; }
  [Parameter] public EventCallback OnRemoveRecipe { get; set; }

  DialogOptions _cardMessageOptions = new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
  Random _random = new();

  private Task ShowRecipeDialog()
  {
    var options = new DialogOptions() { CloseButton = true, FullWidth = true };
    var parameters = new DialogParameters<RecipeDialog> { { x => x.Recipe, Recipe } };

    return DialogService.ShowAsync<RecipeDialog>(Recipe!.Name, parameters, options);
  }

  private async Task RemoveRecipe()
  {
    var result = await DialogService.ShowMessageBox(
      "Remove from Pinned",
      (MarkupString)$"Do you want to Remove <em>{Recipe!.Name}</em>?",
      yesText: "Delete", cancelText: "Cancel", options: _cardMessageOptions);

    if (result != null)
    {
      await using var context = await DbFactory.CreateDbContextAsync();

      context.Recipe.Remove(Recipe);
      await context.SaveChangesAsync();
      await OnRemoveRecipe.InvokeAsync();
    }
  }

  private string GetMealIcon()
    => Recipe!.MealType switch
    {
      "Breakfast" => @Icons.Material.Outlined.EggAlt,
      "Lunch" => @Icons.Material.Outlined.LunchDining,
      _ => @Icons.Material.Outlined.DinnerDining
    };

  private string GetVariableWidth(int min = 60, int max = 75)
  {
    return $"{_random.Next(min, max)}%";
  }

  private int PreparationLevel()
  {
    var result = Math.Min(Recipe!.PreparationTime / 15, 3);
    return result > 0 ? result : 1;
  }

  private string FormatIngredients()
  {
    if (Recipe!.Ingredients.Length > 4)
    {
      return $"{string.Join(", ", Recipe.Ingredients.Take(4))} + {Recipe.Ingredients.Length - 4} more";
    }

    return string.Join(", ", Recipe.Ingredients);
  }

  private Color DifficultyColor()
    => Recipe!.Difficulty switch
    {
      "Easy" => Color.Success,
      "Medium" => Color.Warning,
      "Hard" => Color.Error,
      _ => Color.Default
    };

}