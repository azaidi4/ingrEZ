@page "/pinned"
@using ingrEZ.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ingrEZ.Data.IngrEZDataContext> DbFactory

<PageTitle>Pinned Recipes</PageTitle>

<MudContainer Class="pb-8">
  <NavTabs Selected="Tab.Pinned" />
</MudContainer>

@if (pinnedRecipes == null || searchRecipes == null)
{
  <MudContainer Class="d-flex justify-center pt-20">
    <MudProgressCircular Indeterminate Color="Color.Secondary" />
  </MudContainer>
}
else
{
  <MudContainer Class="d-flex flex-column align-center">
    <MudPaper Class="mb-8 mr-5" MinWidth="400px" Elevation="0">
      <MudTextField @bind-Value="SearchText" Variant="Variant.Outlined" Margin="Margin.None" Adornment="Adornment.End"
        AdornmentIcon="@Icons.Material.TwoTone.Search" Placeholder="Search Recipes" Clearable DebounceInterval="100"
        OnDebounceIntervalElapsed="Search" />
    </MudPaper>
  @if (searchRecipes.Count() == 0)
    {
      <MudContainer Class="d-flex justify-center pt-20">
        <MudCard Class="px-10 py-8" Elevation="0">
          <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom>No Pinned Recipes Found.</MudText>
          <MudText Typo="Typo.h4">To Pin Recipes, Go to <MudLink Href="/new" Typo="Typo.h4">New</MudLink>
          </MudText>
        </MudCard>
      </MudContainer>
    }
    else
    {
      <MudGrid Spacing="5" Justify="Justify.FlexStart">
        @foreach (var recipe in searchRecipes)
        {
          <MudItem xs="6" md="4" lg="3">
            <PinnedListCard Recipe="@recipe" OnRemoveRecipe="GetAllRecipes" />
          </MudItem>
        }
      </MudGrid>
    }
    </MudContainer>
}

@code {
  private Recipe[]? pinnedRecipes;
  private IEnumerable<Recipe>? searchRecipes;
  private string SearchText { get; set; } = string.Empty;

  protected override void OnInitialized()
  {
    GetAllRecipes();
  }

  private void GetAllRecipes()
  {
    using var context = DbFactory.CreateDbContext();
    pinnedRecipes = context.Recipe.OrderByDescending(s => s.PinnedDate).ToArray();
    searchRecipes = pinnedRecipes;
    StateHasChanged();
  }

  protected void Search()
  {
    searchRecipes = pinnedRecipes!.Where(recipe =>
    recipe.Name.Contains(SearchText, StringComparison.InvariantCultureIgnoreCase));
  }
}
